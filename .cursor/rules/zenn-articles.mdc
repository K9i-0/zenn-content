---
description: "Zennの記事作成時の自動ルール適用"
globs: ["articles/*.md"]
alwaysApply: false
---

# Zenn記事作成ルール

このルールはarticlesディレクトリ内のMarkdownファイル編集時に自動適用されます。

## 新記事作成時の必須要素

### 1. YAMLフロントマター
新しい記事ファイルを作成する際は、必ず以下のフロントマターから始めてください：

```yaml
---
title: "記事のタイトル"
emoji: "🐙"
type: "tech" # tech: 技術記事 / idea: アイデア
topics: ["Flutter", "Dart", "関連技術"]
published: false # 下書きの場合はfalse、公開時はtrue
---
```

### 2. ファイル名規則
- 12文字のランダム文字列+`.md`形式（例：`bcfa83b08e56d6.md`）
- または日付形式：`YYYYMMDD_description.md`（例：`20230506_material_button_assist.md`）

## 記事構成ガイドライン

### 基本構成
1. **導入部分**: 記事の概要を簡潔に説明
2. **導入方法**: パッケージのインストールやセットアップ手順
3. **使い方**: 基本的な使用方法を具体例付きで説明
4. **具体例**: 実用的なコード例やサンプル
5. **まとめ**: 記事の要点を整理

### コードブロックの書き方
- **言語指定必須**: ````dart:filename.dart`、`yaml:pubspec.yaml`など
- **ターミナルコマンド**: `text:ターミナル`または`bash`を使用
- **説明文**: コードの前後で何をするかを明確に説明

例：
```dart:main.dart
void main() {
  print('Hello Zenn!');
}
```

### よく使用する技術トピック
- Flutter, Dart
- React, TypeScript, JavaScript  
- Android, iOS
- Web開発, モバイル開発

### 絵文字の使用
- **技術記事**: 🐙（タコ）をメイン
- **その他**: 📱🛠️⚡️🎉💡🔥

### 画像の参照
- 画像は`/images/`ディレクトリに配置
- markdown内では`![説明文](mdc:images/filename.png)`形式で参照

## 文章スタイル

- 手順は番号付きリストで明確に記述
- 「以下のコマンドを実行」「以下のようにします」などの定型句を使用
- 技術記事では具体的なコード例を多用
- 読者にとって実用的で再現可能な内容を心がける

このルールに従って、読みやすく実用的なZenn記事を作成してください。
