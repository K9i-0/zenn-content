---
description: "Zennの記事作成時の自動ルール適用"
globs: articles/*.md
alwaysApply: false
---
# Zenn記事作成ルール

このルールはarticlesディレクトリ内のMarkdownファイル編集時に自動適用されます。

## 新記事作成時の必須要素

### 1. YAMLフロントマター
新しい記事ファイルを作成する際は、必ず以下のフロントマターから始めてください：

```yaml
---
title: "記事のタイトル"
emoji: "🐙"
type: "tech" # tech: 技術記事 / idea: アイデア
topics: ["Flutter", "Dart", "関連技術"]
published: false # 下書きの場合はfalse、公開時はtrue
---
```

### 2. ファイル名規則
- 12文字のランダム文字列+`.md`形式（例：`bcfa83b08e56d6.md`）
- または日付形式：`YYYYMMDD_description.md`（例：`20230506_material_button_assist.md`）

## 記事構成ガイドライン

### 基本構成（タイパ重視）
1. **導入部分**: 記事の概要を1-2行で簡潔に説明
2. **変更内容**: 何が変わったかを端的に説明
3. **手順**: 具体的な作業手順を箇条書きで
4. **トラブルシューティング**: よくあるエラーと解決法
5. **まとめ**: 要点を3つ以内で整理

### タイパ重視の記事作成方針
- **冗長な説明は避ける**: 読者が知りたいのは「何をすればいいか」
- **コード例は最小限**: 必要最小限のコードのみ掲載
- **背景説明は簡潔に**: 詳細な理由より実用的な情報を優先
- **手順は明確に**: 番号付きリストで迷わない手順を提供
- **エラー対処法を含める**: よくあるエラーと解決法を必ず記載

### 避けるべき冗長な構成
- 長々とした背景説明
- 同じことを複数の例で説明
- 過度に詳細なコード例
- 理論的な説明に偏った内容
- 「詳しく解説します」のような前置き

### コードブロックの書き方
- **言語指定必須**: ````dart:filename.dart`、`yaml:pubspec.yaml`など
- **ターミナルコマンド**: `text:ターミナル`または`bash`を使用
- **説明文**: コードの前後で何をするかを明確に説明

例：
```dart:main.dart
void main() {
  print('Hello Zenn!');
}
```

### よく使用する技術トピック
- Flutter, Dart
- React, TypeScript, JavaScript  
- Android, iOS
- Web開発, モバイル開発

### 絵文字の使用
- **技術記事**: 🐙（タコ）をメイン
- **その他**: 📱🛠️⚡️🎉💡🔥

### 画像の参照
- 画像は`/images/`ディレクトリに配置
- markdown内では`![説明文](mdc:images/filename.png)`形式で参照

## 文章スタイル

### 基本的な文章テイスト
- **カジュアルで親しみやすい口調**を心がける
- **AI感を避け、自然な文章**にする
- 「だ・である」調と「です・ます」調を適度に混在させる
- 体験談や実感を含む表現を使用（「自分は〜してます」「〜が便利です」）

### 避けるべき表現
- 過度に丁寧で堅い文章（「について詳しく解説いたします」）
- AI感の強い定型的な表現（「以下に示します」「について説明いたします」）
- 冗長で説明的すぎる文章
- 「〜について詳しく解説します」のような決まり文句

### 推奨する表現
- 「〜が3.0.0にアップデートされて、破壊的変更が入りました」
- 「〜なら、〜が便利です」
- 「〜しておくのがおすすめです👍」
- 「よくある問題」「効率的にやる方法」

### 実用的な記述
- 手順は番号付きリストで明確に記述
- 技術記事では具体的なコード例を多用
- 読者にとって実用的で再現可能な内容を心がける
- トラブルシューティングや実体験を含める

### 絵文字と感嘆符の使用
- 適度に絵文字を使用（👍🎉✨など）
- 感嘆符は自然な範囲で使用
- 技術記事でも親しみやすさを演出

このルールに従って、読みやすく実用的で親しみやすいZenn記事を作成してください。
